import{aH as p,a_ as o,aW as g,a$ as m,aP as s,aC as a,aD as c,aF as l}from"./index-9slH3TG2.js";import{m as n}from"./LayerView2D-ry_5Neyk.js";import{i as d}from"./GraphicContainer-k_I_Awtv.js";import{r as u}from"./GraphicsView2D-BJUsZ1Ps.js";import{u as w}from"./LayerView-eG1gVCIi.js";import"./Container-sZ8RuuZJ.js";import"./EffectView-ZIY1jO96.js";import"./definitions-xyb-9Nb-.js";import"./enums-uBkgX7tf.js";import"./BaseGraphicContainer-VWiWH72i.js";import"./FeatureContainer-t7_5cmJY.js";import"./AttributeStoreView-6V2KdaIQ.js";import"./color-KAK-AA0K.js";import"./number-sTjsTbdA.js";import"./WGLContainer-1QyVIhFN.js";import"./WGLBrushVTLSymbol-TOB_UtyC.js";import"./vec4f32-NvfHy9q7.js";import"./GeometryUtils-b9mbMeHJ.js";import"./ShaderCompiler-doWIo4Qy.js";import"./ProgramTemplate-R_21PRWt.js";import"./MaterialKey-9zbgWCOp.js";import"./alignmentUtils-XT3TYmYW.js";import"./heatmapTextureUtils-sZbv0a7W.js";import"./visualVariablesUtils--qDa7PyS.js";import"./cimAnalyzer-V2A6b5fA.js";import"./BidiEngine-8z8MVveq.js";import"./labelPoint-VCShRuA4.js";import"./GeometryUtils-CEMOhUyj.js";import"./Rect-pT1ASav_.js";import"./ExpandedCIM-689pYf1p.js";import"./util-Ey44E3F4.js";import"./TileContainer-IxN05VMv.js";import"./normalizeUtilsSync-Sa6eYnLt.js";import"./projectionSupport-lst4tmAa.js";import"./json-v6EOeNTY.js";import"./Matcher-p6iCb0_q.js";import"./tileUtils-pcBJnprf.js";import"./TurboLine-3WDyjW26.js";import"./ComputedAttributeStorage-RlyDpk6X.js";let e=class extends n(w){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new u({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new d(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=p(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof o?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(r=>r&&r.uid):g.isCollection(i)&&i.length>0&&(t=i.map(r=>r&&r.uid).toArray());const h=t==null?void 0:t.filter(m);return h!=null&&h.length?(this._addHighlight(h),s(()=>this._removeHighlight(h))):s()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t);this._highlightIds.set(t,h+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t)-1;h===0?this._highlightIds.delete(t):this._highlightIds.set(t,h)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};a([c()],e.prototype,"graphicsView",void 0),e=a([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const hi=e;export{hi as default};
