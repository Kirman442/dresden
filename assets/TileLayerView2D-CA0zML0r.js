import{aK as w,aL as y,aM as I,aN as V,aO as v,aP as H,aQ as T,aR as o,aS as c,aT as q,aC as n,aD as g,aF as S}from"./index-Fa581PZM.js";import"./EffectView-ZhYuuz2A.js";import"./Container-HgTvNi0l.js";import"./BufferPool-blWMO-LJ.js";import"./enums-uBkgX7tf.js";import"./WGLContainer-EnK1FNe-.js";import"./vec4f32-NvfHy9q7.js";import"./color-E69nykg7.js";import"./definitions-VcAE-RVJ.js";import"./MaterialKey-wWSbWIeR.js";import"./number-sTjsTbdA.js";import"./MagnifierPrograms-QP66mc1m.js";import{r as U}from"./GraphicsView2D-7qzhLv3Y.js";import"./AttributeStoreView-AXYJBEMN.js";import{r as C,o as f,n as d}from"./imageUtils-SEljYw4X.js";import{m as b}from"./LayerView2D-c-da-Vl1.js";import{a as Q}from"./HighlightGraphicContainer-oFKTCnS7.js";import{u as P}from"./LayerView-k8lDhY4d.js";import{a as F}from"./RefreshableLayerView-qZl7sO71.js";import{S as k,G}from"./MapServiceLayerViewHelper-ziCDISn0.js";import"./WGLBrushVTLSymbol-Ym74GfbJ.js";import"./GeometryUtils-b9mbMeHJ.js";import"./ShaderCompiler-doWIo4Qy.js";import"./ProgramTemplate-RZOre97J.js";import"./heatmapTextureUtils-NapGCkqR.js";import"./alignmentUtils-XT3TYmYW.js";import"./cimAnalyzer-5fj9LbrM.js";import"./BidiEngine-8z8MVveq.js";import"./labelPoint-GbRVFWCr.js";import"./GeometryUtils-CEMOhUyj.js";import"./Rect-pT1ASav_.js";import"./Rasterizer-MlhjkE5i.js";import"./rasterizingUtils-g8WxGwHu.js";import"./pbf-SRDJetQd.js";import"./imageutils-5VpvlFaz.js";import"./Matcher-8oHMSRac.js";import"./visualVariablesUtils-MacGyMlA.js";import"./tileUtils-pcBJnprf.js";import"./TurboLine-raxerxp2.js";import"./ExpandedCIM-rb_8JK0h.js";import"./CircularArray-1_thnT0U.js";import"./throttle-SZpAiZ7F.js";import"./ComputedAttributeStorage-yIhUzbi8.js";import"./normalizeUtilsSync--fy2m0p9.js";import"./projectionSupport-2K-krMGY.js";import"./json-v6EOeNTY.js";import"./util-_-PsDz29.js";import"./BitmapTileContainer-LcOSRRdV.js";import"./Bitmap-35FVgDCS.js";import"./TileContainer-uWi-Rr9K.js";import"./BaseGraphicContainer-E-83WpPR.js";import"./FeatureContainer-UDFRLpic.js";import"./sublayerUtils-E6y87g0J.js";import"./popupUtils-LOZI3TlK.js";const L=[0,0];let a=class extends F(C(b(P))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,e=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,e==null?void 0:e.effectiveMinLOD,e==null?void 0:e.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(i,h)=>this.fetchTile(i,h)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),k(this,this.layer)){const i=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new Q(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new G({createFetchPopupFeaturesQueryGeometry:(h,r)=>v(h,r,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(h,r)=>{i.graphicUpdateHandler({graphic:h,property:r})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,e;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(e=this._highlightView)==null||e.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):H()}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return T((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(L,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i=this.tilemapCache,{signal:h,resamplingLevel:r=0}=e;if(!i)try{return await this._fetchImage(t,h)}catch(s){if(!o(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(r<3){const m=this._tileInfoView.getTileParentId(t.id);if(m){const u=new c(m),_=await this.fetchTile(u,{...e,resamplingLevel:r+1});return d(this._tileInfoView,_,u,t)}}throw s}const l=new c(0,0,0,0);let p;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,l,{signal:h}),l.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);p=await this._fetchImage(l,h)}catch(s){if(o(s))throw s;p=await this._fetchImage(t,h)}return this.resampling?d(this._tileInfoView,p,l,t):p}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){o(e)||q.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};n([g()],a.prototype,"resampling",null),n([g()],a.prototype,"tilemapCache",null),a=n([S("esri.views.2d.layers.TileLayerView2D")],a);const Rt=a;export{Rt as default};
