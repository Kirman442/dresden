import{aH as p,a_ as o,aW as g,a$ as m,aP as s,aC as a,aD as c,aF as l}from"./index-Ag4O5CUz.js";import{m as n}from"./LayerView2D-t-lM3hiI.js";import{i as d}from"./GraphicContainer-8EVnXLpi.js";import{r as u}from"./GraphicsView2D-pQlnNisq.js";import{u as w}from"./LayerView-LmaagB7Y.js";import"./Container-i0iG4pPG.js";import"./EffectView-CpL-etqN.js";import"./definitions-r4s07KTk.js";import"./enums-uBkgX7tf.js";import"./BaseGraphicContainer-Hk7TxtgM.js";import"./FeatureContainer-eOZG_ihV.js";import"./AttributeStoreView-EvCsjkg3.js";import"./color-Mz_2dK3W.js";import"./number-sTjsTbdA.js";import"./WGLContainer-FkPO4eNj.js";import"./WGLBrushVTLSymbol-2K_O0P3b.js";import"./vec4f32-NvfHy9q7.js";import"./GeometryUtils-b9mbMeHJ.js";import"./ShaderCompiler-doWIo4Qy.js";import"./ProgramTemplate-pbHI2j_B.js";import"./MaterialKey-6vvrvzpD.js";import"./alignmentUtils-XT3TYmYW.js";import"./heatmapTextureUtils-FcQOheWo.js";import"./visualVariablesUtils-TpPKwbEa.js";import"./cimAnalyzer-Y6KRRNJw.js";import"./BidiEngine-8z8MVveq.js";import"./labelPoint-BKkv7j8P.js";import"./GeometryUtils-CEMOhUyj.js";import"./Rect-pT1ASav_.js";import"./ExpandedCIM-TbbD2lL4.js";import"./util-m4-l98Hn.js";import"./TileContainer-VCi3xp5C.js";import"./normalizeUtilsSync-MAQDu-hV.js";import"./projectionSupport-y9S6TKgH.js";import"./json-v6EOeNTY.js";import"./Matcher-rvZTEIgz.js";import"./tileUtils-pcBJnprf.js";import"./TurboLine-p1LlI5H8.js";import"./ComputedAttributeStorage-ox8g39Fk.js";let e=class extends n(w){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new u({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new d(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=p(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof o?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(r=>r&&r.uid):g.isCollection(i)&&i.length>0&&(t=i.map(r=>r&&r.uid).toArray());const h=t==null?void 0:t.filter(m);return h!=null&&h.length?(this._addHighlight(h),s(()=>this._removeHighlight(h))):s()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t);this._highlightIds.set(t,h+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t)-1;h===0?this._highlightIds.delete(t):this._highlightIds.set(t,h)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};a([c()],e.prototype,"graphicsView",void 0),e=a([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const hi=e;export{hi as default};
